{"version":3,"file":"worker.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvBA;AAEA;AACA;AACA","sources":["webpack://cf-worker-middleware/./src/handler.ts","webpack://cf-worker-middleware/webpack/bootstrap","webpack://cf-worker-middleware/./src/index.ts"],"sourcesContent":["// import { createEdgeContext } from '@uniformdev/context-edge'\n// import { createCloudflareProxyEdgeHandler } from '@uniformdev/context-edge-cloudflare'\n// import { ManifestV2 } from '@uniformdev/context'\n// import manifest from \"./uniform/context-manifest.json\";\n\n// export async function handleRequest(request: Request): Promise<Response> {\n//   //@ts-ignore\n//   if (!ORIGIN_URL) {\n//     console.error('ORIGIN_URL environment is not defined')\n//     return new Response('Configuration Error', {\n//       status: 500,\n//     })\n//   }\n\n//   const handler = createCloudflareProxyEdgeHandler()\n\n//   const context = createEdgeContext({\n//     request,\n//     manifest: manifest as ManifestV2,\n//   })\n\n//   const { response } = await handler({\n//     context,\n//     request,\n//     //@ts-ignore\n//     originUrl: new URL(`https://${ORIGIN_URL}`).origin,\n//   })\n\n//   return response\n// }\n\n\nexport async function handleRequest(request: Request): Promise<Response> {\n   //@ts-ignore\n  // if (!ORIGIN_URL) {\n  //   console.error('ORIGIN_URL environment is not defined')\n  //   return new Response('Configuration Error', {\n  //     status: 500,\n  //   })\n  // }\n  // const url1 = `https://${ORIGIN_URL}/todos/1`;\n  // const url2 = `https://${ORIGIN_URL}/posts/1`;\n  const url1 = `https://jsonplaceholder.typicode.com/todos/1`;\n  const url2 = `https://jsonplaceholder.typicode.com/posts/1`;\n  const init = {\n    headers: {\n      'content-type': 'application/json;charset=UTF-8',\n    },\n  };\n  const responses = await Promise.all([fetch(url1, init), fetch(url2, init)]);\n  const results = await Promise.all([gatherResponse(responses[0]), gatherResponse(responses[1])]);\n  return new Response(results.join(), init);\n}\n\n/**\n * gatherResponse awaits and returns a response body as a string.\n * Use await gatherResponse(..) in an async function to get the response body\n * @param {Response} response\n */\nasync function gatherResponse(response: any) {\n  // await sleep(5000);\n  const { headers } = response;\n  const contentType = headers.get('content-type') || '';\n  if (contentType.includes('application/json')) {\n    return JSON.stringify(await response.json());\n  } else if (contentType.includes('application/text')) {\n    return response.text();\n  } else if (contentType.includes('text/html')) {\n    return response.text();\n  } else {\n    return response.text();\n  }\n}\n\nconst sleep = async (milliseconds: any) => {\n    await new Promise(resolve => {\n        return setTimeout(milliseconds)\n    });\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { handleRequest } from './handler'\n\naddEventListener('fetch', (event) => {\n  event.respondWith(handleRequest(event.request))\n})\n"],"names":[],"sourceRoot":""}